{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-4ca61bec5b4ff77d.js","src/js/controller.js","src/js/model.js","src/js/config.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/js/helpers.js","src/js/views/RecipeView.js","node_modules/@parcel/runtime-js/lib/runtime-88a4a3029057712e.js","src/js/views/view.js","src/js/views/searchView.js","src/js/views/resultView.js","src/js/views/paginationView.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"8ad96e854a59a05f\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez \n//email: bmjimenez@hotmail.com\n//Descripción: Este es el controlador principal de la aplicación Forkify, que se encarga de\n//manejar la lógica de la aplicación, incluyendo la obtención de recetas y su renderizado.\n//Implementando el patrón de diseño MVC (Modelo-Vista-Controlador) para separar la lógica de negocio\n//de la lógica de presentación y facilitar el mantenimiento y la escalabilidad de la aplicación.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-19\n\n\n// Importando las dependencias necesarias\n// Importando el modelo y las constantes de configuración\nimport * as model from './model.js';\nimport { API_URL, TIMEOUT_SEC } from './config.js'; // Importando las constantes  URL y timeout\nimport { Fraction_function } from './helpers.js'; // Importando la clase Fraction_function\nimport { loadSearchResults,getSearchResultsPage}  from './model.js';\nimport  icons  from 'url:../img/icons.svg'; // Importando los iconos SVG\n\n// Importando las vistas necesarias\nimport recipeView from './views/RecipeView.js';\nimport searchView from './views/searchView.js';\nimport resultsView from './views/resultView.js';\nimport paginationView from './views/paginationView.js'\n\n\n// Seleccionando el elemento del DOM donde se renderizará la receta\nconst recipeContainer = document.querySelector('.recipe');\n\n\n// Definiendo el controlador de recetas\n// Este controlador se encarga de manejar la lógica de las recetas, incluyendo la carga y renderizado de las mismas\n// Utiliza la función loadRecipe del modelo para obtener la receta y luego\n// renderiza la receta utilizando la vista recipeView\n// También maneja errores y muestra mensajes de error si ocurre algún problema al cargar la receta\n// La función controlRecipes es asíncrona para manejar operaciones que pueden tardar, como\n// la carga de datos desde una API o base de datos.\nconst controlRecipes = async function() {\n  try {\n    // Obtener el ID de la receta desde el hash de la URL\n    const id = window.location.hash.slice(1); \n    // Si no hay ID, salir de la función\n    if (!id) {return;} \n    // Renderizar spinner mientras carga la receta\n    recipeView.renderSpinner();\n    // Cargar la receta utilizando el modelo\n    await model.loadRecipe(id);\n    // Renderizar la receta\n    recipeView.render(model.state.recipe);\n    // Mensaje de éxito al cargar la receta\n   // recipeView.renderMessage('Receta cargada correctamente!'); \n    // temporal Mostrar los datos de la receta en la consola para depuración\n    console.log('Receta cargada:', model.state.recipe);\n  } catch (err) {\n    //Se lanza un error si ocurre un problema al cargar la receta\n    console.error(`Error al cargar la receta: ${err}`);\n    // Renderizar mensaje de error en la vista recipeView\n    // Esto permite mostrar un mensaje de error al usuario en la interfaz de usuario\n    // si ocurre un problema al cargar la receta, como un error de red o un ID\n    recipeView.renderError(err.message);\n    throw err; // Lanzar el error para que sea manejado por el controlador\n  }\n}// termina función controlRecipes\n\n\n// Definiendo el controlador de búsqueda de resultados\n// Este controlador se encarga de manejar la lógica de búsqueda de recetas, incluyendo la carga y\n// renderizado de los resultados de búsqueda. Utiliza la función loadSearchResults del modelo\n// para obtener los resultados de búsqueda y luego renderiza los resultados utilizando la vista resultsView.\n// También maneja la paginación de los resultados y muestra mensajes de error si ocurre algún problema al cargar los resultados de búsqueda.\n// La función controlSearchResults es asíncrona para manejar operaciones que pueden tardar, como\n// la carga de datos desde una API o base de datos\n// y utiliza la vista searchView para obtener la consulta de búsqueda del usuario.\nconst controlSearchResults = async function () {\n  try {\n    const query = searchView.getQuery();\n\n    if (!query) return;\n    // Renderizar spinner\n    resultsView.renderSpinner();\n    // Cargar los resultados de búsqueda utilizando el modelo\n    await model.loadSearchResults(query);\n    // Renderizar los resultados de búsqueda\n    resultsView.render(getSearchResultsPage());\n    // Renderizar la paginación de resultados\n    paginationView.render(model.state.search);\n\n    console.log(model.state.search.results); // Muestra los resultados en consola\n  } catch (err) {\n    console.error('❌ Error en controlSearchResults:', err);\n  }\n};// termina función controlSearchResults\n\n\n// Definiendo la funcion de controlador de paginación\n// Este controlador se encarga de manejar la lógica de paginación de los resultados de búsqueda\n// Utiliza la vista paginationView para renderizar los botones de paginación y\n// la función getSearchResultsPage del modelo para obtener los resultados de búsqueda de la página actual\n// La función controlPagination es asíncrona para manejar operaciones que pueden tardar, como\n// la carga de datos desde una API o base de datos.\n// También maneja la lógica de navegación entre páginas de resultados de búsqueda.\nconst controlPagination = function (goToPage) {\n  resultsView.render(model.getSearchResultsPage(goToPage));\n  paginationView.render(model.state.search);\n};\n\n\n// Inicializando el controlador\n// Esta función se encarga de inicializar el controlador, añadiendo los manejadores de eventos necesarios\n// para renderizar la receta cuando se carga la página o se cambia el hash de la URL.\n// Utiliza la vista recipeView para añadir el manejador de eventos y renderizar la receta\n// También añade los manejadores de eventos para la búsqueda y paginación utilizando las vistas\n// searchView y paginationView respectivamente.\n// La función init se llama al final para iniciar el controlador. \nconst init = function() {\n  recipeView.addHandlerRender(controlRecipes); \n  searchView.addHandlerSearch(controlSearchResults);\n  paginationView.addHandlerClick(controlPagination);\n  console.log('Controlador inicializado');\n\n}\ninit(); // Llamada al controlador inicial para iniciar la aplicación\n\n\n","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Implementando el modelo MVC para la aplicación Forkify\n// Descripción: Este es el modelo de la aplicación Forkify, que se encarga de\n// manejar la lógica de negocio, incluyendo la obtención de recetas y su renderizado.\n// Repositorio: https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n\n// Importando la URL de la API y la función getJSON para realizar peticiones HTTP\nimport { API_URL,RES_PER_PAGE } from './config.js'; // Importando la URL de la API   \nimport { getJSON } from './helpers.js';\n\n\n//Declaracion de objeto state con elementos inicializados\n// Este objeto state contiene la receta actual y los resultados de búsqueda.\n// Se utiliza para almacenar el estado de la aplicación y facilitar la gestión de datos.\n// La propiedad recipe almacena la receta actual, mientras que search contiene los resultados de búsqueda,\n// la consulta de búsqueda, la página actual y el número de resultados por página.\n// Este objeto se utiliza en el controlador para acceder a los datos de la aplicación y renderizar\n// las vistas correspondientes.\nexport const state = {\n    recipe: {},\n    search: {\n        query: '',\n        results: [],\n        page: 1,\n        resultsPerPage: RES_PER_PAGE,\n    },\n};\n\n//Función asíncrona loadRecipe que recibe id como parámetro\n// Esta función se encarga de cargar una receta específica desde la API\n// y actualizar el objeto state con los datos de la receta.\n// Si ocurre un error, se captura y se muestra en la consola.\nexport async function loadRecipe(id) {\n    try {\n        // Llamada a la función getJSON para obtener los datos de la receta\n        const data = await getJSON(`${API_URL}${id}`);\n        console.log('Datos de la receta:', data);\n        // Validar response structure recibida de la API\n        // Si la estructura de datos no es válida, se lanza un error\n        if (!data?.data?.recipe) {\n            throw new Error('Estructura de datos invalida');\n        }\n        // Desestructuración del objeto recipe y guardado en state\n        // Aquí se extraen los datos de la receta del objeto data y se crea un nuevo\n        // objeto recipe con las propiedades necesarias.\n        // Se asegura de que la propiedad ingredients sea un array, incluso si no hay ingredientes.\n        // Esto es importante para evitar errores al renderizar la receta en la vista.  \n        const { recipe } = data.data;\n        const recipeObj = {\n            id: recipe.id,\n            title: recipe.title,\n            publisher: recipe.publisher,\n            sourceUrl: recipe.source_url,\n            image: recipe.image_url,\n            servings: recipe.servings,\n            cookTime: recipe.cooking_time,\n            ingredients: Array.isArray(recipe.ingredients) ? recipe.ingredients : [],\n        };\n\n        //Guardar en en objeto state y mostrar en consola\n        // Aquí se actualiza el objeto state con la receta cargada,\n        // lo que permite que otras partes de la aplicación accedan a los datos de la receta\n        state.recipe = recipeObj;\n        console.log('Objeto Recipe cargado:', state.recipe);\n\n    } catch (err) {\n        // Lanzar el error para que sea manejado por el controlador\n        throw err;\n        // Aquí se captura cualquier error que ocurra durante la carga de la receta\n        // y se lanza para que pueda ser manejado por el controlador.\n        // Esto es útil para manejar errores de red, errores de la API o errores de validación de datos.\n        // También se puede mostrar un mensaje de error al usuario en la vista.\n        // En este caso, se lanza el error para que sea manejado por el controlador\n        // y se pueda mostrar un mensaje de error adecuado en la interfaz de usuario.\n        // Se puede utilizar console.log para mostrar el error en la consola durante el desarrollo.\n        console.log(`Error al cargar receta: ${err}`);\n    }\n}// termina la función loadRecipe\n\n// Función asíncrona loadSearchResults que recibe query como parámetro\n// Esta función se encarga de cargar los resultados de búsqueda desde la API\n// y actualizar el objeto state con los resultados de búsqueda.\n// Si ocurre un error, se captura y se muestra en la consola.\nexport async function loadSearchResults(query) {\n    try {\n        const data = await getJSON(`${API_URL}?search=${query}`);\n        console.log('Resultados de la búsqueda:', data);\n\n        // Validar estructura de datos recibida de la API\n        // Si la estructura de datos no es válida, se lanza un error\n        // Aquí se verifica que la propiedad recipes exista en el objeto data.data\n        // y que sea un array. Si no es así, se lanza un error.\n        // Esto es importante para asegurarse de que los datos recibidos sean válidos\n        // y se puedan procesar correctamente en la aplicación.\n        if (!data?.data?.recipes || !Array.isArray(data.data.recipes)) {\n            throw new Error('Estructura de datos inválida');\n        }\n        // Guardar query en el estado\n        state.search.query = query;\n        // Transformar los resultados y guardarlos en el objeto state\n        // Aquí se mapea el array de recetas recibido de la API y se crea un nuevo\n        // array de objetos con las propiedades necesarias para mostrar en la vista.\n        // Se asegura de que cada objeto tenga las propiedades id, title, publisher e image.\n        // Esto es importante para que la vista pueda renderizar correctamente los resultados de búsqueda.\n        // Se utiliza el método map para transformar los datos y crear un nuevo array de objetos.\n        // Luego, se guarda este array en la propiedad results del objeto state.search.\n        // Esto permite que otras partes de la aplicación accedan a los resultados de búsqueda\n        state.search.results = data.data.recipes.map(rec => {\n            return {\n                id: rec.id,\n                title: rec.title,\n                publisher: rec.publisher,\n                image: rec.image_url,\n            };\n        });\n\n        console.log('Resultados de busqueda guardados:', `${state.search.results}`);\n    } catch (err) {\n        console.log(`${err} 💥💥💥💥`);\n        throw err; // Lanzar el error para que sea manejado por el controlador  \n    }\n}// termina la función loadSearchResults\n\n// Función para obtener una página de resultados de búsqueda\n// Esta función toma un número de página como argumento y devuelve los resultados de búsqueda\n// correspondientes a esa página. Si no se proporciona un número de página, se utiliza el valor\n// actual de la página en el objeto state.search.page.\n// Se calcula el índice de inicio y fin de los resultados para esa página y se devuelve un\n// array con los resultados correspondientes.\n// Esta función es útil para implementar la paginación de resultados de búsqueda en la aplicación.\n// Permite obtener los resultados de búsqueda de una página específica y facilita la navegación\n// entre páginas de resultados.\nexport const getSearchResultsPage = function (page = state.search.page) {\n    state.search.page = page;\n\n    const start = (page - 1) * state.search.resultsPerPage;\n    const end = page * state.search.resultsPerPage;\n\n    return state.search.results.slice(start, end);\n};","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Archivo de configuración para la aplicación Forkify\n// Contiene constantes y configuraciones globales\n// Repositorio:https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n\n// Este archivo contiene la URL de la API y el tiempo de espera para las peticiones HTTP\n// Se utiliza para configurar la conexión a la API y manejar errores de tiempo de espera.\n// Estas constantes son importadas en otros módulos para realizar peticiones a la API y manejar la lógica de la aplicación.\n// Se recomienda mantener estas constantes en un archivo separado para facilitar su mantenimiento y reutilización en toda la aplicación.\n// Además, se pueden agregar más configuraciones globales en este archivo según sea necesario en el futuro.\nexport const API_URL = 'https://forkify-api.herokuapp.com/api/v2/recipes/';\nexport const TIMEOUT_SEC = 5; // Timeout para las peticiones\nexport const RES_PER_PAGE = 10; // paginas de hasta 10 resultados ","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Archivo helpers.js con funciones auxiliares para la aplicación Forkify\n// Contiene funciones para manejar peticiones a la API y otras utilidades\n// Repositorio: https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n\nimport { API_URL, TIMEOUT_SEC } from './config.js'; // Importando la URL de la API desde config.js\n\n\n// Funcion para obtener los datos de una receta y hacer una petición a la API\n// Esta función realiza una petición a la API y devuelve los datos de la receta\n\nexport async function getJSON(id) {\n    try {\n\n        const fetchPro = fetch(id);\n        //console.log('Petición a la API:', `${API_URL}${id}`);\n        const res = await Promise.race([fetchPro, timeout(TIMEOUT_SEC)]);\n\n        const data = await res.json();\n        // Validación del estado de res\n        if (!res.ok) throw new Error(`${data.message} (${res.status})`);\n        return data\n\n    } catch (err) {\n        // Lanzar el error para que sea manejado por el controlador;\n        throw err;\n    }\n}// termina la función getJSON\n\n\n\n// Funcion para manejar el timeout de las peticiones\n// Esta función devuelve una promesa que se rechaza después de un tiempo específico\n// Sirve para manejar casos en los que una petición tarda demasiado tiempo en completarse.\nconst timeout = function (s) {\n    return new Promise(function (_, reject) {\n        setTimeout(function () {\n            reject(new Error(`Request took too long! Timeout after ${s} second`));\n        }, s * 1000);\n    });\n};\n\n\n// Debido a problemas con Fractional, tuve que implementar una clase para manejar fracciones\n// Clase Fraction_function para manejar fracciones\n// Esta clase permite crear fracciones a partir de números o cadenas de texto\n// Si se proporciona un denominador, se crea una fracción con el numerador y denominador especificados\n// Si no se proporciona un denominador, se calcula la fracción a partir of un número o cadena de texto\n// La clase incluye métodos para convertir la fracción a una cadena de texto y para obtener su valor numérico\nexport class Fraction_function {\n    constructor(numerator, denominator) {\n        if (denominator) {\n            this.numerator = numerator;\n            this.denominator = denominator;\n        } else {\n            const value = typeof numerator === 'number' ? numerator : parseFloat(numerator);\n            const tolerance = 1.0E-6;\n            let h1 = 1,\n                h2 = 0,\n                k1 = 0,\n                k2 = 1,\n                b = value;\n            do {\n                const a = Math.floor(b);\n                let aux = h1;\n                h1 = a * h1 + h2;\n                h2 = aux;\n                aux = k1;\n                k1 = a * k1 + k2;\n                k2 = aux;\n                b = 1 / (b - a);\n            } while (Math.abs(value - h1 / k1) > value * tolerance);\n\n            this.numerator = h1;\n            this.denominator = k1;\n        }\n    }\n\n    toString() {\n        return this.denominator === 1\n            ? `${this.numerator}`\n            : `${this.numerator}/${this.denominator}`;\n    }\n\n    valueOf() {\n        return this.numerator / this.denominator;\n    }\n} // termina la clase Fraction_function\n","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez\n//email: bmjimenez@hotmail.com\n//Descripción: Este es el modelo de la aplicación Forkify, que se encarga de manejar la lógica de negocio, incluyendo la obtención de recetas y su renderizado.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-16\n\n// Importando iconos SVG y la clase Fraction_function\nimport icons from 'url:../../img/icons.svg'; // Usar parcel u otra herramienta para íconos SVG\nimport {Fraction_function}  from '..//helpers.js'; // requiere: npm install fracty\nimport View from './view.js'\n\n// Clase RecipeView se encarga de renderizar la receta en el DOM, mostrar errores y spinner\n// y manejar eventos relacionados con la receta.\n// RecipeView hereda de la clase View para reutilizar métodos comunes de renderización\n// y manejo de errores.\nclass RecipeView extends View {\n  // Seleccionando el elemento del DOM donde se renderizará la receta\n  _parentElement = document.querySelector('.recipe');\n  _data;\n  _errorMessage = 'We could not find that recipe. Please try another one!';\n  _message = 'Recipe loaded successfully!';\n\n  // Método para renderizar la receta en el DOM\n  // Este método genera el HTML necesario para mostrar la receta\n  // y lo inserta en el contenedor de recetas.\n  // Utiliza la función _generateMarkup para crear el HTML de la receta.\n  render(data) {\n    if (!data || typeof data !== 'object') return this.renderError();\n    this._data = data;\n    const markup = this._generateMarkup();\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  // Método para renderizar un spinner mientras se cargan los datos\n  renderSpinner() {\n    const markup = `\n      <div class=\"spinner\">\n        <svg>\n          <use href=\"${icons}#icon-loader\"></use>\n        </svg>\n      </div>\n    `;\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  // Este método renderiza un mensaje de error en el DOM\n  // Se utiliza un template literal para crear el HTML del mensaje de error.\n  // El método _clear se utiliza para eliminar el contenido previo antes de renderizar el error\n  // y se inserta el nuevo contenido al principio del contenedor de recetas.\n  renderError(message = this._errorMessage) {\n    if (!message) message = this._errorMessage;\n    const markup = `\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"${icons}#icon-alert-triangle\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>\n    `;\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  // Este método renderiza un mensaje de exito en el DOM\n  // Se utiliza un template literal para crear el HTML del mensaje de éxito.\n  // El método _clear se utiliza para eliminar el contenido previo antes de renderizar el error\n  // y se inserta el nuevo contenido al principio del contenedor de recetas.\n  renderMessage(message = this._message) {\n    if (!message) message = this._message;\n    const markup = `\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"${icons}#icon-smile\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>\n    `;\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }// termina el método renderMessage\n\n\n  // Método para añadir un manejador de eventos para renderizar la receta\n  // Este método se utiliza para escuchar eventos de cambio en el hash de la URL\n  // y cargar la receta correspondiente cuando el hash cambia.\n  // Se utiliza para actualizar la vista de la receta cuando el usuario navega a una receta\n  // específica a través de la URL.\n  // Se utiliza un bucle forEach para añadir el manejador de eventos a los eventos\n  // 'hashchange' y 'load', lo que permite que la receta se cargue\n  // tanto al cambiar el hash de la URL como al cargar la página por primera vez.\n  // Esto asegura que la receta se renderice correctamente en ambos casos.\n  // Se utiliza el método addEventListener para añadir el manejador de eventos.\n  // El manejador de eventos se pasa como argumento a este método.\n  // Esto permite que el controlador pueda definir la lógica de renderizado de la receta.\n  // El manejador de eventos se ejecutará cada vez que ocurra uno de los eventos\n  // especificados, lo que permite que la receta se renderice automáticamente\n  // cuando el usuario navega a una receta específica.\n  addHandlerRender(handler) {\n    ['hashchange', 'load'].forEach(ev =>\n      window.addEventListener(ev, handler)\n    );\n  }\n\n  // Método para limpiar el contenido del contenedor de recetas\n  // Este método se utiliza para eliminar el contenido previo antes de renderizar una nueva receta.\n  _clear() {\n    this._parentElement.innerHTML = '';\n  }\n\n  // Método para renderizar la receta en el DOM\n  // Este método genera el HTML necesario para mostrar la receta\n  // y lo inserta en el contenedor de recetas.\n  // Utiliza la función _generateMarkup para crear el HTML de la receta.\n  _generateMarkup() {\n    if (!this._data.ingredients || !Array.isArray(this._data.ingredients)) {\n      return this.renderError('Ingredientes no disponibles');\n    }\n\n    return `\n    <figure class=\"recipe__fig\">\n        <img src=\"${this._data.image}\" alt=\"${this._data.title}\" class=\"recipe__img\" />\n        <h1 class=\"recipe__title\"><span>${this._data.title}</span></h1>\n    </figure>\n\n    <div class=\"recipe__details\">\n        <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n            <use href=\"${icons}#icon-clock\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cookTime}</span>\n        <span class=\"recipe__info-text\">minutes</span>\n        </div>\n        <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n            <use href=\"${icons}#icon-users\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\n        <span class=\"recipe__info-text\">servings</span>\n        </div>\n    </div>\n\n    <div class=\"recipe__ingredients\">\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\n        <ul class=\"recipe__ingredient-list\">\n        ${this._data.ingredients.map(this._generateIngredientMarkup).join('')}\n        </ul>\n    </div>\n\n    <div class=\"recipe__directions\">\n        <h2 class=\"heading--2\">How to cook it</h2>\n        <p class=\"recipe__directions-text\">\n        This recipe was designed by\n        <span class=\"recipe__publisher\">${this._data.publisher}</span>. Check it out!\n        </p>\n        <a class=\"btn--small recipe__btn\" href=\"${this._data.sourceUrl}\" target=\"_blank\">\n        <span>Directions</span>\n        <svg class=\"search__icon\">\n            <use href=\"${icons}#icon-arrow-right\"></use>   \n        </svg>\n        </a>    \n    </div>\n  `;\n  }// termina el método _generateMarkup\n\n  // Método privado para generar el HTML de un ingrediente\n  // Este método se utiliza para crear el HTML de cada ingrediente de la receta.\n  // Utiliza la función _formatQuantity para formatear la cantidad del ingrediente.\n  // Este método es llamado dentro de _generateMarkup para generar la lista de ingredientes.\n  // Se utiliza un template literal para crear el HTML de cada ingrediente.\n  // Cada ingrediente se muestra con su cantidad, unidad y descripción.\n  _generateIngredientMarkup(ing) {\n    return `\n      <li class=\"recipe__ingredient\">\n        <svg class=\"recipe__icon\">\n          <use href=\"${icons}#icon-check\"></use>\n        </svg>\n        <div class=\"recipe__quantity\">\n          ${ing.quantity ? new Fraction_function(ing.quantity).toString() : ''}\n        </div>\n        <div class=\"recipe__description\">\n          <span class=\"recipe__unit\">${ing.unit || ''}</span>\n          ${ing.description}\n        </div>\n      </li>\n    `;\n  }\n\n  // Método privado para formatear la cantidad de un ingrediente\n  // Este método utiliza la clase Fraction_function para convertir la cantidad a una fracción\n  // Si la cantidad no es un número válido, se devuelve la cantidad original.\n  _formatQuantity(qty) {\n    try {\n      return new Fraction_function(qty).toString();\n    } catch (e) {\n      return qty;\n    }\n  }\n}// termina la clase RecipeView\n\n// Exportar una instancia de RecipeView para ser utilizada en el controlador\n// Esto permite que el controlador pueda acceder a los métodos de la clase RecipeView\n// y renderizar recetas, spinner y errores en el DOM.\n// Se utiliza el patrón Singleton para asegurar que solo haya una instancia de RecipeView.\n// Esto es útil para mantener un único punto de acceso a la vista de recetas en toda la aplicación.\n// Esto evita la creación de múltiples instancias y asegura que los cambios en la vista se reflecten en un solo lugar.\n// Se puede importar esta instancia en el controlador y utilizar sus métodos directamente.\nexport default new RecipeView();","module.exports = parcelRequire.resolve(\"icons.0809ef97.svg\") + \"?\" + Date.now();","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez\n//email: bmjimenez@hotmail.com\n//Descripción: Este es el modelo de la aplicación Forkify, que se encarga de manejar\n// las vistas de la aplicación, incluyendo la búsqueda de recetas, la paginación\n// y la visualización de recetas.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-18\n\n\n//Importa iconos\nimport icons from 'url:../../img/icons.svg'; \n//import View from './view.js';\n\n// Clase View que maneja la renderización de datos en el DOM\n// Esta clase se encarga de renderizar los datos en el DOM, mostrar errores y spinner\n// y manejar eventos relacionados con la vista.\n// La clase View es una clase base (padre) que puede ser extendida por otras vistas específicas,\n// como RecipeView o SearchView, para reutilizar métodos comunes de renderización y manejo de errores.\n// Esta clase proporciona métodos para renderizar datos, mostrar errores y mensajes,\n// y renderizar un spinner mientras se cargan los datos.\n// También proporciona un método para limpiar el contenido previo antes de renderizar nuevos datos.\n// La clase View es una parte fundamental de la arquitectura de la aplicación, ya que\n// permite separar la lógica de negocio de la lógica de presentación, facilitando el mantenimiento\n// y la escalabilidad de la aplicación.\n// Esta clase es utilizada por otras vistas para renderizar datos en el DOM y manejar eventos relacionados\n// con la vista, como la búsqueda de recetas o la visualización de recetas específicas.\nexport default class View {\n  _data;\n\n  // Método para renderizar los datos en el DOM\n  // Este método toma los datos y genera el HTML correspondiente utilizando el método _generateMarkup.\n  // Luego, limpia el contenido previo del elemento padre y agrega el nuevo HTML al principio.\n  // Si los datos son inválidos o no existen, se renderiza un mensaje de error\n  // utilizando el método renderError.\n  // Si los datos son válidos, se renderiza el HTML generado por _generateMarkup\n  // y se limpia el contenido previo del elemento padre antes de agregar el nuevo HTML.\n  // Este método es utilizado por las vistas para renderizar datos en el DOM y actualizar la\n  // interfaz de usuario con la información más reciente.\n  render(data) {\n    if (!data || (Array.isArray(data) && data.length === 0)) return this.renderError();\n\n    this._data = data;\n    const markup = this._generateMarkup();\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  // Método para limpiar el contenido previo del elemento padre\n  _clear() {\n    this._parentElement.innerHTML = '';\n  }\n\n  // Método para renderizar un spinner mientras se cargan los datos\n  // Este método genera un HTML para un spinner de carga y lo inserta en el elemento\n  // padre antes de renderizar los datos. Se utiliza para indicar al usuario que los datos\n  // están siendo cargados y que debe esperar.\n  // El spinner se muestra mientras se realizan operaciones asíncronas, como la carga de\n  // datos desde una API o base de datos.\n  renderSpinner() {\n    const markup = `\n      <div class=\"spinner\">\n        <svg>\n          <use href=\"${icons}#icon-loader\"></use>\n        </svg>\n      </div>`;\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  // Método para renderizar un mensaje de error\n  // Este método genera un HTML para un mensaje de error y lo inserta en el elemento\n  // padre. \n  renderError(message = this._errorMessage) {\n    const markup = `\n      <div class=\"error\">\n        <div>\n          <svg>\n            <use href=\"${icons}#icon-alert-triangle\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>`;\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  // Método para renderizar un mensaje de éxito\n  // Este método genera un HTML para un mensaje de éxito y lo inserta en el elemento\n  // padre. \n  renderMessage(message = this._message) {\n    const markup = `\n      <div class=\"message\">\n        <div>\n          <svg>\n            <use href=\"${icons}#icon-smile\"></use>\n          </svg>\n        </div>\n        <p>${message}</p>\n      </div>`;\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n}// termina la clase View\n","\n//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez \n//email: bmjimenez@hotmail.com\n//Descripción: Esta clase genera la Vista de los resultados de busqueda \n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-17\n\n// Esta clase SearchView se encarga de manejar la vista de búsqueda en la aplicación Forkify.\n// Permite obtener la consulta de búsqueda del usuario y manejar el evento de búsqueda.\n// Utiliza el patrón de diseño de vista para separar la lógica de la interfaz de usuario de\n// la lógica de negocio, facilitando el mantenimiento y la escalabilidad de la aplicación.\nclass SearchView {\n  _parentEl = document.querySelector('.search');\n\n  // Método para obtener la consulta de búsqueda del usuario\n  // Este método busca el valor del campo de entrada de búsqueda y lo devuelve.\n  getQuery() {\n    const query = this._parentEl.querySelector('.search__field').value;\n    this._clearInput();\n    return query;\n  }\n\n  // Método para limpiar el campo de entrada de búsqueda\n  _clearInput() {\n    this._parentEl.querySelector('.search__field').value = '';\n  }\n\n  // Método para renderizar un mensaje de error en la vista de búsqueda\n  addHandlerSearch(handler) {\n    this._parentEl.addEventListener('submit', function (e) {\n      e.preventDefault();\n      handler();\n    });\n  }\n}// termina la clase searchView\n\n// Exportando una instancia de SearchView para que pueda ser utilizada en otras partes de la aplicación\nexport default new SearchView();","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n//Autor: Jose Bernardo Moya Jimenez\n//email: bmjimenez@hotmail.com\n//Descripción: Esta es la vista de resultados de búsqueda de recetas en la aplicación Forkify.\n// Esta vista se encarga de renderizar los resultados de búsqueda obtenidos del modelo,\n// mostrando una lista de recetas que coinciden con la consulta del usuario.\n// Utiliza la clase View para manejar la renderización de los resultados y la clase icons\n// para mostrar iconos SVG en la interfaz de usuario.\n//Repositorio:https://github.com/bmjimenez/proyectojs2\n//Fecha: 2025-07-19\n\n// Importando la clase View \nimport View from './view.js';\n//import icons from 'url:../../img/icons.svg';\n\n// ResultsView hereda de la clase View para reutilizar métodos comunes de renderización\nclass ResultsView extends View {\n  _parentElement = document.querySelector('.results');\n  _errorMessage = 'No recipes found for your query. Please try again!';\n  _message = '';\n\n  // Método para renderizar los resultados de búsqueda\n  // Este método toma los datos de resultados de búsqueda y genera el HTML correspondiente\n  // utilizando el método _generateMarkupPreview. Luego, limpia el contenido previo del elemento\n  // padre y agrega el nuevo HTML al principio.\n\n  _generateMarkup() {\n    if (!this._data || this._data.length === 0) {\n      return this.renderError(this._errorMessage)};\n    return this._data.map(this._generateMarkupPreview).join('');\n  }\n\n  _generateMarkupPreview(result) {\n    return `\n      <li class=\"preview\">\n        <a class=\"preview__link\" href=\"#${result.id}\">\n          <figure class=\"preview__fig\">\n            <img src=\"${result.image}\" alt=\"${result.title}\" />\n          </figure>\n          <div class=\"preview__data\">\n            <h4 class=\"preview__title\">${result.title}</h4>\n            <p class=\"preview__publisher\">${result.publisher}</p>\n            <div class=\"preview__user-generated\"></div>\n          </div>\n        </a>\n      </li>`;\n  }\n}// termina la clase ResultsView\n\n// Exportando una instancia de ResultsView para que pueda ser utilizada en otras partes de la aplicación\n// Esto permite que la vista de resultados sea reutilizable y se pueda acceder a sus métodos y\n// propiedades desde otras partes del código, como el controlador principal de la aplicación.\n// Al exportar una instancia, se asegura que siempre se utilice la misma instancia de ResultsView\n// en toda la aplicación, lo que facilita el manejo del estado y la renderización de resultados.\n// Esto es útil para mantener la consistencia en la interfaz de usuario y evitar problemas de\n// duplicación de vistas o resultados.\n// Además, al exportar una instancia, se puede acceder a los métodos de la clase ResultsView\n// directamente desde el controlador, lo que simplifica la lógica de renderización de resultados\n// y mejora la legibilidad del código.\nexport default new ResultsView();","//Proyecto: Forkify Curso Javascript 2 Tec Milenio\n// Implementando el modelo MVC para la aplicación Forkify\n// Descripción: Este es el modulo de la aplicación Forkify, que se encarga de hacer la paginación de los resultados de búsqueda\n// Repositorio: https://github.com/bmjimenez/proyectojs2\n// Fecha: 2025-07-16\n// Autor: Bernardo Moya Jimenez\n// email: bmjimenez@hotmail.com\n\nimport View from './view.js';\nimport icons from 'url:../../img/icons.svg';\n\n// Clase PaginationView que maneja la paginación de los resultados de búsqueda\n// Esta clase hereda de la clase View para reutilizar métodos comunes de renderización\n// y manejo de errores. Se encarga de renderizar los botones de paginación\n// y manejar los eventos de clic en los botones de paginación.\nclass PaginationView extends View {\n  _parentElement = document.querySelector('.pagination');\n\n  // Método para renderizar los botones de paginación\n  // Este método genera el HTML necesario para los botones de paginación\n  // y lo inserta en el contenedor de paginación.\n  addHandlerClick(handler) {\n    this._parentElement.addEventListener('click', function (e) {\n      const btn = e.target.closest('.btn--inline');\n      if (!btn) return;\n\n      const goToPage = +btn.dataset.goto;\n      console.log('GotoPage', `${goToPage}`);\n      handler(goToPage);\n    });\n  }\n  // Método para generar el HTML de los botones de paginación\n  // Este método toma los datos de paginación y genera el HTML correspondiente\n  _generateMarkup() {\n    const curPage = this._data.page;\n    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);\n    //console.log('Total de paginas', `${numPages}`);\n\n\n    // Página 1, y hay más\n    if (curPage === 1 && numPages > 1) {\n      return `\n        <button data-goto=\"${curPage + 1}\" class=\"btn--inline pagination__btn--next\">\n          <span>Page ${curPage + 1}</span>\n          <svg class=\"search__icon\">\n            <use href=\"${icons}#icon-arrow-right\"></use>\n          </svg>\n        </button>\n      `;\n    }\n\n    // Última página\n    if (curPage === numPages && numPages > 1) {\n      return `\n        <button data-goto=\"${curPage - 1}\" class=\"btn--inline pagination__btn--prev\">\n          <svg class=\"search__icon\">\n            <use href=\"${icons}#icon-arrow-left\"></use>\n          </svg>\n          <span>Page ${curPage - 1}</span>\n        </button>\n      `;\n    }\n\n    // Página intermedia\n    if (curPage < numPages) {\n      return `\n        <button data-goto=\"${curPage - 1}\" class=\"btn--inline pagination__btn--prev\">\n          <svg class=\"search__icon\">\n            <use href=\"${icons}#icon-arrow-left\"></use>\n          </svg>\n          <span>Page ${curPage - 1}</span>\n        </button>\n        <button data-goto=\"${curPage + 1}\" class=\"btn--inline pagination__btn--next\">\n          <span>Page ${curPage + 1}</span>\n          <svg class=\"search__icon\">\n            <use href=\"${icons}#icon-arrow-right\"></use>\n          </svg>\n        </button>\n      `;\n    }\n\n    // Solo una página\n    return '';\n  }\n}// termina la clase PaginationView\n\n// Exportando una instancia de PaginationView para que pueda ser utilizada en otras partes de la aplicación\n// Esto permite que la vista de paginación sea reutilizable y se pueda acceder a sus métodos y\n// propiedades desde otras partes del código, como el controlador principal de la aplicación.\nexport default new PaginationView();\n"],"names":[],"version":3,"file":"forkify.4a59a05f.js.map","sourceRoot":"/__parcel_source_root/"}